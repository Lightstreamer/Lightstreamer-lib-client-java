
plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

dependencies {
    implementation 'io.netty:netty-codec-http:4.1.46.Final'
    implementation 'io.netty:netty-handler:4.1.46.Final'
    implementation 'io.netty:netty-handler-proxy:4.1.46.Final'
    implementation 'com.lightstreamer:ls-log-adapter-java:1.0.2'
    implementation 'com.cedarsoftware:json-io:4.10.0'
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

sourceSets {
    main {
         java {
            srcDirs = ['../src']
            exclude '**/*OIO*'
            exclude '**/*Android*'
            exclude '**/mpn/android/*'
            exclude '**/mpn/util/*'
         }
    }
}

task preprocess(type: JavaExec) {
	compileJava.dependsOn 'preprocess'
	
    doLast {
        java.nio.file.Path srcTarget = java.nio.file.Paths.get(project.projectDir.absolutePath, "preprocess", "java").toAbsolutePath()
        java.nio.file.Path baseDir = rootProject.projectDir.toPath()
        
        /* strip off Android parts */
        sourceSets.main.java.files.each { File file ->
        	def contents = file.getText('UTF-8')
        	// (?s) enables dotall mode 
        	def m = contents =~ /(?s)\s*(\/\/)?\s*BEGIN_ANDROID_ONLY.*?END_ANDROID_ONLY/
        	if (m) {
        		contents = m.replaceAll('')
        	}
        	def out = baseDir.relativize(file.toPath())
        	// drop src component
        	out = out.subpath(1, out.nameCount)
        	out = srcTarget.resolve(out).toFile()
        	out.parentFile.mkdirs()
        	out.write(contents, 'UTF-8')
        }
        
        sourceSets.main.java.srcDirs = [srcTarget]
    }
    
	classpath = files('../common-lib/encdec.jar')
   	args '-c', '-e', "javase_client ${project.version} build ${project.build}"
   	standardOutput = new ByteArrayOutputStream()
   	
	doLast {
		/* replace LS_cid */
  		def cid = standardOutput.toString()
  		def f1 = file('preprocess/java/com/lightstreamer/client/requests/CreateSessionRequest.java')
  		def c1 = f1.getText('UTF-8').replace('pcYgxptg4pkpW38AK1x-onG39Do', cid)
  		f1.write(c1, 'UTF-8')
  		/* replace version and build number */
  		def f2 = file('preprocess/java/com/lightstreamer/client/LightstreamerClient.java')
  		def c2 = f2.getText('UTF-8')
  			.replace('name_placeholder', 'javase_client')
  		  	.replace('version_placeholder', project.version)
  		  	.replace('build_placeholder', project.build)
  		   	.replace('extra_placeholder', '')
  		f2.write(c2, 'UTF-8')
	}
}

task preprocessJavadoc(type: Copy) {
	dependsOn 'preprocess'
	
	from 'preprocess/java'
	into 'preprocess/javadoc'
    include '**/client/*.java'
    exclude '**/client/Internals.java'
    
    doLast {
    	java.nio.file.Paths.get(project.projectDir.absolutePath, "preprocess", "javadoc").eachFileRecurse {
			def file = it.toFile()
			if (file.isFile()) {
				/* exclude internal members */
		    	def contents = file.getText('UTF-8')
		    		.replace('public /* @exclude */', '')
		    		.replace('protected /* @exclude */', '')
		    	/* strip off Android docs */
		    	def m = contents =~ /(?s)\s*(\/\/)?\s*BEGIN_ANDROID_DOC_ONLY.*?END_ANDROID_DOC_ONLY/
		    	if (m) {
		        		contents = m.replaceAll('')
		        }
		        /* replace links to logger docs */
		        def log_version = "1.0.2"
		        contents = contents.replace('ls-log-adapter-java/latest/api', "ls-log-adapter-java/${log_version}/api")
		    	file.write(contents, 'UTF-8')
			}
		}
		
    }
}

javadoc {
	dependsOn 'preprocessJavadoc'
	
    title "Lightstreamer Java Client SDK ${project.version} API Reference"
    if (project.hasProperty('javadocExe')) {
    	executable = javadocExe
    }
    source = ['preprocess/javadoc']
    options.encoding = 'UTF-8'
    options.author = false
    options.version = false
    options.memberLevel = JavadocMemberLevel.PUBLIC
    options.tags = [
    	'general_edition_note:a:Edition Note:', 
    	'lifecycle:a:Lifecycle:',
    	'beta:a:Beta version note:',
    	'incomplete:a:Beta version note:',
    	'notification:a:Related notifications:',
    	'default:a:Default value:']
    options.overview '../common-lib/java_overview.html'
}

task zipJavadoc(type: Zip) {
	dependsOn 'javadoc'

   	archiveFileName = "javadocs.zip"
   	destinationDirectory = file("$buildDir/dist")
   	from "$buildDir/docs/javadoc"
}

def projectUrl = 'https://github.com/Lightstreamer/Lightstreamer-lib-client-java'

publishing {
    publications {
        javaSElibrary(MavenPublication) {
            from components.java

            pom {
                name = 'Lightstreamer Java Client SDK'
                description = 'Lightstreamer Java Client SDK'
                url = projectUrl

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        name = 'support'
                        email = 'support@lightstreamer.com'
                        organization = 'Lightstreamer'
                        organizationUrl = 'https://www.lightstreamer.com'
                    }
                }

                scm {
                    connection = "scm:git:${projectUrl}.git"
                    developerConnection = "scm:git:${projectUrl}.git"
                    url = projectUrl
                }
            }
        }
    }

    repositories {
        maven {
            url = version.endsWith('SNAPSHOT') ? 'https://oss.sonatype.org/content/repositories/snapshots' : 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

signing {
    sign publishing.publications.javaSElibrary
}

clean.doLast {
	java.nio.file.Paths.get(project.projectDir.absolutePath, "preprocess").deleteDir()
}
